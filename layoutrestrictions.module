<?php
use Drupal\Core\Form\FormStateInterface;
use Stephane888\Debug\debugLog;
use Drupal\user\Entity\Role;
use Drupal\Core\Form\SubformState;
use Drupal\Core\Plugin\PluginWithFormsInterface;
use Drupal\Core\Plugin\PluginFormInterface;
use Drupal\Core\Layout\LayoutInterface;

/**
 *
 * @file
 * Primary module hooks for layoutrestrictions module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

/**
 * Implements hook_form_FORM_ID_alter() for the entity view display edit form.
 */
function _layoutrestrictions_form_layout_builder_configure_section_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if (!empty($form['layout_settings'])) {
    
    $formObject = $form_state->getFormObject();
    /**
     *
     * @var \Drupal\layout_builder\Plugin\SectionStorage\DefaultsSectionStorage $sectionStorge
     */
    $sectionStorge = $formObject->getSectionStorage();
    /**
     *
     * @var \Drupal\formatage_models\Plugin\Layout\Sections\FormatageModelsSimpleBlock $layout
     */
    $layout = $sectionStorge->getSection(0)->getLayout();
    $configuration = $layout->getConfiguration();
    // debugLog::kintDebugDrupal($configuration,
    // 'layoutrestrictions_form_layout_builder_configure_section_alter', true);
    $form['layout_settings']['layoutrestrictions'] = [
      
      '#type' => 'details',
      '#title' => 'layout restrictions',
      '#open' => false,
      '#tree' => true
    ];
    $roles = [];
    foreach (Role::loadMultiple() as $role) {
      $roles[$role->id()] = $role->label();
    }
    $form['layout_settings']['layoutrestrictions']['roles'] = [
      '#type' => 'checkboxes',
      '#title' => 'selectionner les roles',
      '#options' => $roles
    ];
    // array_unshift($form['#submit'], '_layoutrestrictions_submit_block_form');
    $form['#submit'][] = '_layoutrestrictions_submit_block_form';
    $form['#submit'] = array_reverse($form['#submit']);
    // debugLog::kintDebugDrupal($form['#submit'],
    // 'submit__layoutrestrictions_form_layout_builder_configure_section_alter',
    // true);
  }
}

function layoutrestrictions_form_alter(&$form, FormStateInterface $form_state) {
  if ($form['#form_id'] === 'layout_builder_configure_section0') {
    $formObject = $form_state->getFormObject();
    /**
     *
     * @var \Drupal\layout_builder\Plugin\SectionStorage\DefaultsSectionStorage $sectionStorge
     */
    $sectionStorge = $formObject->getSectionStorage();
    $components = $sectionStorge->getSections();
    $settings = [];
    if (!empty($components)) {
      /**
       *
       * @var \Drupal\layout_builder\Section $component
       */
      $component = reset($components);
      $settings = $component->getThirdPartySettings('layoutrestrictions');
    }
    debugLog::kintDebugDrupal($settings, '-------layout_builder_configure_section', true);
    $settings = $settings + [
      'layoutrestrictions' => [
        'roles' => []
      ]
    ];
    
    $form['layout_settings']['layoutrestrictions'] = [
      '#type' => 'details',
      '#title' => 'layout restrictions',
      '#open' => false,
      '#tree' => true
    ];
    $roles = [];
    foreach (Role::loadMultiple() as $role) {
      $roles[$role->id()] = $role->label();
    }
    $form['layout_settings']['layoutrestrictions']['roles'] = [
      '#type' => 'checkboxes',
      '#title' => 'selectionner les roles',
      '#options' => $roles,
      '#default_value' => $settings['layoutrestrictions']['roles']
    ];
    // array_unshift($form['#submit'], '_layoutrestrictions_submit_block_form');
    $form['#submit'][] = '_layoutrestrictions_submit_block_form';
    // $form['#submit'] = array_reverse($form['#submit']);
    // debugLog::kintDebugDrupal($form_state->getTemporary(),
    // 'layoutrestrictions_form_layout_builder_configure_section_alter', true);
    // $form['#entity_builders'][] = '_layoutrestrictions_submit_block_form';
  }
}

function _layoutrestrictions_submit_block_form(array &$form, FormStateInterface $form_state) {
  /**
   *
   * @var \Drupal\layout_builder\Form\ConfigureSectionForm $formObject
   */
  $formObject = $form_state->getFormObject();
  /**
   *
   * @var \Drupal\layout_builder\Plugin\SectionStorage\DefaultsSectionStorage $sectionStorge
   */
  $sectionStorge = $formObject->getSectionStorage();
  
  $layoutrestrictions = $form_state->getValue([
    'layout_settings',
    'layoutrestrictions'
  ]);
  
  if (!empty($layoutrestrictions)) {
    $components = $sectionStorge->getSections();
    if (!empty($components)) {
      /**
       *
       * @var \Drupal\layout_builder\Section $component
       */
      $component = reset($components);
      debugLog::kintDebugDrupal($component, 'layoutrestrictions_component', true);
      $component->setThirdPartySetting('layoutrestrictions', 'layoutrestrictions', $layoutrestrictions);
    }
    
    $sectionStorge->setThirdPartySetting('layoutrestrictions', 'layoutrestrictions', $layoutrestrictions);
    $sectionStorge->save();
  }
  else {
    // $sectionStorge->unsetThirdPartySetting('layoutrestrictions',
    // 'layoutrestrictions');
  }
}

/**
 * Cette fonction doit etre refaite afin de mieux comprendre la logique de
 * sauvegarde de layout.
 *
 * @param array $form
 * @param FormStateInterface $form_state
 */
function _layoutrestrictions_submit_block_form_none(array &$form, FormStateInterface $form_state) {
  
  /**
   *
   * @var \Drupal\layout_builder\Form\ConfigureSectionForm $formObject
   */
  $formObject = $form_state->getFormObject();
  /**
   *
   * @var \Drupal\layout_builder\Plugin\SectionStorage\DefaultsSectionStorage $sectionStorge
   */
  $sectionStorge = $formObject->getSectionStorage();
  // $component = $formObject->getCurrentComponent();
  /**
   *
   * @var \Drupal\formatage_models\Plugin\Layout\Sections\FormatageModelsSimpleBlock $layout
   */
  $layout = $sectionStorge->getSection(0)->getLayout();
  // recuperation de la config actuel
  $configuration = $layout->getConfiguration();
  $configuration['layoutrestrictions'] = $form_state->getValue([
    'layout_settings',
    'layoutrestrictions'
  ]);
  $layout->setConfiguration($configuration);
  //
  $subform_state = SubformState::createForSubform($form['layout_settings'], $form, $form_state);
  _layoutrestrictions__getPluginForm($layout)->submitConfigurationForm($form['layout_settings'], $subform_state);
  //
  // debugLog::kintDebugDrupal($layout->getConfiguration(),
  // '_layoutrestrictions_submit_block_form', true);
  
  //
  $sectionStorge->getSection(0);
  $sectionStorge->getSection(0)->setLayoutSettings($configuration);
  $sectionStorge->save();
}

/**
 * Retrieves the plugin form for a given layout.
 *
 * @param \Drupal\Core\Layout\LayoutInterface $layout
 *        The layout plugin.
 *        
 * @return \Drupal\Core\Plugin\PluginFormInterface The plugin form for the
 *         layout.
 */
function _layoutrestrictions__getPluginForm(LayoutInterface $layout) {
  if ($layout instanceof PluginWithFormsInterface) {
    return \Drupal::service('plugin_form.factory')->createInstance($layout, 'configure');
  }
  
  if ($layout instanceof PluginFormInterface) {
    return $layout;
  }
  throw new \InvalidArgumentException(sprintf('The "%s" layout does not provide a configuration form', $layout->getPluginId()));
}

function layoutrestrictions_form_entity_view_display_layout_builder_form_alter(&$form, FormStateInterface $form_state) {
  $form['actions']['submit']['#submit'][] = '_layoutrestrictions_entity_view_display_layout_builder_form';
  // $form['actions']['submit']['#submit'] =
  // array_reverse($form['actions']['submit']['#submit']);
  // dump($form);
}

function _layoutrestrictions_entity_view_display_layout_builder_form(array &$form, FormStateInterface $form_state) {
  /**
   *
   * @var \Drupal\layout_builder\Form\DefaultsEntityForm $formObject
   */
  $formObject = $form_state->getFormObject();
  /**
   *
   * @var \Drupal\layout_builder\Plugin\SectionStorage\DefaultsSectionStorage $sectionStorage
   */
  $sectionStorage = $formObject->getSectionStorage();
  // debugLog::$max_depth = 5;
  // debugLog::kintDebugDrupal($form['layout_builder'],
  // '_layoutrestrictions_entity_view_display_layout_builder_form', true);
}
